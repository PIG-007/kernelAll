#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys


project_path = "/home/hacker/kernelAll/"
source_code_path = project_path + "kernelSource/"
vmlinux_file_path = project_path + "kernelPwn/"
tar_file_path = project_path + "kernelTarFile/"


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-debug",dest="debug_flag",action="store_true",help="Need debug information?")
    parser.add_argument("-c", dest="configure",nargs="*", help="Set the configure of Kernel!Such as CONFIG_SLAB_FREELIST_RANDOM=y CONFIG_SLAB_FREELIST_HARDENED=n")
    parser.add_argument("-v", dest="version", type=str,help="Set the version of Kernel!")
    args = parser.parse_args()
    if(not args.version):
        print("Must set the version!")
        parser.print_help()
        sys.exit()

    #get file
    wget_cmd = "wget -P {0} -c https://mirror.tuna.tsinghua.edu.cn/kernel/v{1}.x/linux-{2}.tar.gz".format(tar_file_path,args.version[0:1],args.version)
    if(not os.system(wget_cmd)):
        pass
    else:
        print("Can't wget zhe file!No such version or can't download!")
        sys.exit()

    tar_cmd = "tar -zvxf {0}linux-{1}.tar.gz -C {2}".format(tar_file_path,args.version,source_code_path)
    os.system(tar_cmd)


    #make config
    make_config_cmd = "make --directory={0}linux-{1}/ defconfig".format(source_code_path,args.version)
    os.system(make_config_cmd)


    config_path =  source_code_path + "linux-" + args.version + "/" + ".config"
    #add some config
    os.system("sed -i '/CONFIG_GENERIC_IRQ_PROBE=y/d' {0}".format(config_path))
    os.system("sed -i '/CONFIG_SYSTEM_TRUSTED_KEYS=.*$/d' {0}".format(config_path))
    if(args.debug_flag):
        cmd = "sed -i 's/^.*{0}.*$/{1}/g' {2}".format("CONFIG_DEBUG_INFO","CONFIG_DEBUG_INFO=y", config_path)
        os.system(cmd)
        print("Get DEBUG!")
    if( args.configure ):
        for i in args.configure:
            option = i[0:-2]
            p = subprocess.Popen(
                ["sed", "-n", "/^.*{0}[ =].*$/p".format(option),config_path],
                stdout=subprocess.PIPE)
            result = p.stdout.read().decode("utf-8").strip()
            print(result)
            if(option in result):
                cmd = "sed -i 's/^.*{0}[ =].*$/{1}/g' {2}".format(option,i,config_path)
                os.system(cmd)


    #make
    make_config_cmd = "sudo make --directory={0}linux-{1}/ -j6".format(source_code_path, args.version)
    os.system(make_config_cmd)

    #copy kernel file
    mkdir_cmd = "mkdir -p {0}kernel-{1}".format(vmlinux_file_path,args.version)
    os.system(mkdir_cmd)
    os.system("cp {0}linux-{1}/arch/x86/boot/bzImage {2}kernel-{1}/".format(source_code_path,args.version,vmlinux_file_path))
    os.system("cp {0}linux-{1}/vmlinux {2}kernel-{1}/".format(source_code_path,args.version,vmlinux_file_path))
main()
